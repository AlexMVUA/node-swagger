---
swagger: "2.0"
info:
  description: "This is a sample NodeJS Training server.  You can find \nout more about Swagger at \n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n"
  version: 1.0.0
  title: Swagger NodeJS Training
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /1.0.0
tags:
- name: User
  description: Operations on user
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: UserGroup
  description: Operations on user group
  externalDocs:
    url: http://swagger.io
schemes:
- https
- http
paths:
  /users/user/:
    post:
      tags:
      - User
      summary: Add a new user
      operationId: addUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: User object that needs to be added
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "201":
          description: Created user id
          examples:
            application/json:
              id: 111
        "400":
          description: Bad Request Validation exception
  /users/user/{id}:
    get:
      tags:
      - User
      summary: Gets a user by ID.
      parameters:
      - name: id
        in: path
        description: User id of the user to get.
        required: true
        type: integer
      responses:
        "200":
          description: A Created User ID returned
          examples:
            application/json:
              id: 111
    put:
      tags:
      - User
      summary: Update an existing user
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: User id of the user to update.
        required: true
        type: integer
      - in: body
        name: body
        description: User object that needs to be updated
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: User ID returned
          examples:
            application/json:
              id: 111
        "404":
          description: User not found
    delete:
      tags:
      - User
      summary: Delete a user by ID.
      parameters:
      - name: id
        in: path
        description: User id of the user to delete.
        required: true
        type: integer
      responses:
        "200":
          description: removed successfully
        "204":
          description: User not found
  /users/getAutoSuggestUsers:
    get:
      tags:
      - User
      summary: Finds User by login and limiting returned quantity
      description: Multiple users mached with provided login substring and limited by quantity
      operationId: getAutoSuggestUsers
      produces:
      - application/json
      parameters:
      - name: login
        in: query
        description: Login substring considered for searching exiting users
        required: false
        type: string
      - name: limit
        in: query
        description: Auto suggested users maximum quanity
        required: false
        type: integer
      responses:
        "200":
          description: successful operation
          examples:
            application/json:
            - id: 111
              name: secondUser
              age: 23
              isDeleted: false
              groupId: admingroup
            - id: 222
              name: thirdUser
              age: 29
              isDeleted: false
              groupId: employee
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "204":
          description: No results with provided parameters
  /userGroups/:
    get:
      tags:
      - UserGroup
      summary: Gets ALL user groups.
      parameters: []
      responses:
        "200":
          description: successful operation
          examples:
            application/json:
            - id: admingroup
              name: admingroup
              permissions:
              - Permission.READ
              - Permission.WRITE
            - id: employee
              name: employee
              permissions:
              - Permission.READ
          schema:
            type: array
            items:
              $ref: '#/definitions/UserGroup'
  /userGroups/group/{id}:
    get:
      tags:
      - UserGroup
      summary: Gets a user group by ID.
      parameters:
      - name: id
        in: path
        description: UserGroup id of the user to get.
        required: true
        type: string
      responses:
        "200":
          description: A UserGroup object
          examples:
            application/json:
              id: 'admingroup'
              name: 'admingroup'
              permissions:
              - Permission.READ
              - Permission.WRITE
          schema:
            $ref: '#/definitions/UserGroup'
        "404":
          description: UserGroup not found
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 11123
      login:
        type: string
        example: login
      password:
        type: string
        example: qwerty
      age:
        type: integer
        format: int64
        example: 12
      isDeleted:
        type: boolean
      groupId:
        type: string
    xml:
      name: User
  UserGroup:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: string
        example: 'admingroup'
      name:
        type: string
        example: 'admingroup'
      permissions:
        type: array
        example:
        - READ
        - WRITE
        xml:
          name: permissions
          wrapped: true
        items:
          $ref: '#/definitions/Permission'
    xml:
      name: UserGroup
  Permission:
    type: string
    xml:
      name: Permission
    enum:
    - READ
    - WRITE
    - DELETE
    - SHARE
    - UPLOAD_FILES
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
